#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>

#define TRUE 1
#define FALSE 0

static unsigned long long * getProperDividors(unsigned long long number);	//진약수
//static unsigned long long _factorial(unsigned long long n);
//static void readTextAndSet(void);	//file read and set
static int isPrimeNum(unsigned long long n);

void main(void)
{	
	unsigned long long i,k;
	unsigned long long *pdsArr;
	unsigned long long amicablePairChainCnt;

	//for (i = 4; i < 24; i++)	{
		pdsArr = getProperDividors(28);
	//}
	for (i = 0; *(pdsArr+i) != 0; i++)
		printf("%llu ", pdsArr[i]);

	if (pdsArr != NULL)	{
		free(pdsArr);
		pdsArr = NULL;
	}

	printf("\n----------end--------\n");
	system("pause");
}

static int isPrimeNum(unsigned long long n)
{
	unsigned long long i;
	
	if (n == 2)
		return TRUE;

	if (n%2 == 0)
		return FALSE;

	for (i = 3; i <= n/3; i+=2)	{
		if (n%i == 0)
			return FALSE;
	}
	return TRUE;
}

static unsigned long long * getProperDividors(unsigned long long number)
{
	unsigned long long i;
	unsigned long long pdsCnt = 0;
	unsigned long long *tempArr = NULL;
	unsigned long long *pdsArr;

	tempArr = malloc((number/2+1)*sizeof(unsigned long long));

	for (i = 1; i < number/2+1; i++)	{
		if (number%i == 0)	{
			tempArr[pdsCnt] = i;
			pdsCnt++;
		}
	}

	pdsArr = malloc((pdsCnt+1)*sizeof(unsigned long long));
	for (i = 0; i < pdsCnt; i++)	{
		pdsArr[i] = tempArr[i];		
	}
	pdsArr[i] = 0;

	if (tempArr != NULL)	{
		free(tempArr);
		tempArr = NULL;
	}

	return pdsArr;
}

/*
static unsigned long long _factorial(unsigned long long n)
{	
	if (n == 0)
		return 0;
	else if (n == 1)
		return 1;
	else if (n == 2)
		return 2;

	return n*_factorial(n-1);
}*/


/*
static void readTextAndSet(void)
{
	FILE *fp;
	char *names = NULL;
	
	char temp[32];	
	unsigned int wordIndex = 0, tempCnt = 0;
	unsigned int i;

	fp = fopen("my_problem_22_name.txt","r");
	
	if(fp != NULL)
	{
		fseek(fp, 0L, SEEK_END);
		fileLen = ftell(fp);

		fseek(fp, 0L, SEEK_SET);
		names = malloc((fileLen+1)*sizeof(char));
		memset(names, 0x00, (fileLen+1)*sizeof(char));
		fread(names, sizeof(char), fileLen, fp);

		fclose(fp);
	}
	else {
		printf("file open failed!\n");
	}
}*/