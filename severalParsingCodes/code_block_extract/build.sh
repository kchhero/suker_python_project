		echo -n "aarch64-linux-gnu"
	else
		echo -n "arm-linux-gnueabi"
	fi
}

function build_bl1()
{
	if [ ${BUILD_ALL} == "true" ] || [ ${BUILD_BL1} == "true" ]; then
		echo ""
		echo "================================================="
		echo "build bl1"
		echo "================================================="

		local bl1_source=
		if [ "${ARM_ARCH}" == "arm64" ]; then
			bl1_source=${TOP}/bl1-artik7
		else
			bl1_source=${TOP}/bl1-artik530
		fi
		local upper_board_name=$(echo "$BOARD_PURENAME" | awk '{print toupper($0)}')
		cd ${bl1_source}
		make clean
		make BOARD=${upper_board_name}
		cd ${TOP}
	fi
}

function build_uboot_env_param()
{
	local compiler_prefix=${1}

	cp `find . -name "env_common.o"` copy_env_common.o
	${compiler_prefix}objcopy -O binary --only-section=.rodata.default_environment `find . -name "copy_env_common.o"`
	tr '\0' '\n' < copy_env_common.o > default_envs.txt
	cp default_envs.txt default_envs.txt.orig
	tools/mkenvimage -s 16384 -o params.bin default_envs.txt

	# Generate recovery param
	sed -i -e 's/rootdev=0/rootdev=1/g' default_envs.txt
	sed -i -e 's/bootcmd=run ramfsboot/bootcmd=run recoveryboot/g' default_envs.txt
	tools/mkenvimage -s 16384 -o params_recovery.bin default_envs.txt

	# Generate mmcboot param
	sed -i -e 's/bootcmd=run ramfsboot/bootcmd=run mmcboot/g' default_envs.txt.orig
	tools/mkenvimage -s 16384 -o params_mmcboot.bin default_envs.txt.orig

	# Generate sd-boot param
	sed -i -e 's/rootdev=0/rootdev=1/g' default_envs.txt.orig
	tools/mkenvimage -s 16384 -o params_sdboot.bin default_envs.txt.orig

	# Generate hwtest sd-boot param
	sed -i -e 's/bootcmd=run mmcboot/bootcmd=run hwtestboot/g' default_envs.txt.orig
	tools/mkenvimage -s 16384 -o params_hwtest.bin default_envs.txt.orig

	rm copy_env_common.o default_envs.txt default_envs.txt.orig
}

function build_uboot()
{
	if [ ${BUILD_ALL} == "true" ] || [ ${BUILD_UBOOT} == "true" ]; then
		echo ""
		echo "================================================="
		echo "build u-boot"
		echo "================================================="

		cd ${TOP}/u-boot-artik7

		local config=
		if [ ${BOARD_NAME} == ${BOARD_PURENAME} ]; then
			config=s5p6818_arm64_${BOARD_NAME}
		else
			config=${BOARD_NAME}
		fi

		make clean
		make ${config}_config

		cross_compile=$(get_cross_compile_prefix)-
		if [ "${RELEASE_VERSION}" != "" ]; then
			make CROSS_COMPILE=${cross_compile} EXTRAVERSION="-$RELEASE_VERSION" -j8
		else
			make CROSS_COMPILE=${cross_compile} -j8
		fi

		build_uboot_env_param ${cross_compile}

		PLAIN_VERSION=`cat include/generated/version_autogenerated.h | grep "define PLAIN_VERSION" | awk -F \" '{print $2}'`
		UBOOT_VERSION="U-Boot $PLAIN_VERSION"
		cd ${TOP}

		if [ "${ARM_ARCH}" == "arm64" ]; then
			local uart_base=
			if [ ${BOARD_NAME} == ${BOARD_PURENAME} ]; then
				# ex> drone : use uart0
				uart_base=0xc00a1000
			else
				# ex> artik710_raptor : use uart3
				uart_base=0xc00a3000
			fi

			if [ ${BUILD_UBOOT} == "true" ]; then
				make -f optee_build/Makefile PLAT_DRAM_SIZE=${MEM_SIZE} PLAT_UART_BASE=${uart_base} build-fip -j8
				make -f optee_build/Makefile PLAT_DRAM_SIZE=${MEM_SIZE} PLAT_UART_BASE=${uart_base} build-singleimage -j8
			fi
		fi
	fi
}

function build_optee()
{
	if [ ${BUILD_ALL} == "true" ] || [ ${BUILD_OPTEE} == "true" ]; then
		echo ""
		echo "================================================="
		echo "build optee"
		echo "================================================="

		local uart_base=
		if [ ${BOARD_NAME} == ${BOARD_PURENAME} ]; then
			# ex> drone : use uart0
			uart_base=0xc00a1000
		else
			# ex> artik710_raptor : use uart3
			uart_base=0xc00a3000
		fi

		make -f optee_build/Makefile clean
		make -f optee_build/Makefile PLAT_DRAM_SIZE=${MEM_SIZE} PLAT_UART_BASE=${uart_base} build-bl1 -j8
		make -f optee_build/Makefile PLAT_DRAM_SIZE=${MEM_SIZE} PLAT_UART_BASE=${uart_base} build-lloader -j8
		make -f optee_build/Makefile PLAT_DRAM_SIZE=${MEM_SIZE} PLAT_UART_BASE=${uart_base} build-bl32 -j8
		make -f optee_build/Makefile PLAT_DRAM_SIZE=${MEM_SIZE} PLAT_UART_BASE=${uart_base} build-fip -j8
		make -f optee_build/Makefile PLAT_DRAM_SIZE=${MEM_SIZE} PLAT_UART_BASE=${uart_base} build-singleimage -j8
	fi
}

parse_args $@
print_args
check_board_name ${BOARD_NAME}
get_board_prefix
parse_config $CONFIG_DIR/${BOARD_NAME}.cfg
setup_toolchain
if [ "${CHECK_BRANCH}" == "true" ]; then
	check_all_branch
fi
build_bl1
build_uboot
if [ "${ARM_ARCH}" == "arm64" ]; then
	build_optee
fi
build_kernel
if [ "${ARM_ARCH}" == "arm64" ]; then
	build_optee_module
fi
build_buildroot
build_hwtest
build_user
post_process
