#!/usr/bin/env python
# -*- coding: CP949 -*-
#
# generated by wxGlade 0.7.0 on Wed Aug 26 18:18:21 2015
# TODO : 13.10 configuration 

import wx
import os
import sys
#import atexit
import shutil
import ctypes
import subprocess
import threading

# begin wxGlade: dependencies
#import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

SUKER_DEBUG = "------------------------------------\n   SUKER debug ==>     \n------------------------------------\n"

#def saveSetupIni():
#    iniFile = file(setupiniFilePath, 'w')
#    iniFile.writelines(setupINIData)
#    print setupINIData
#    iniFile.close()
#
#atexit.register(saveSetupIni)

class fastBootMain(wx.Frame):
    destIdx = 0
    setupiniFilePath = ""
    setupINIData = ["fl>>","s1>>","s2>>","s3>>","s4>>","s5>>","d1>>","d2>>"]
    activeDestPath = ""
    partitionAndBinary = {"sbl1":"sbl1.mbn",
                          "pmic":"pmic.mbn",
                          "sdi":"sdi.mbn",
                          "dbi":"sdi.mbn",
                          "tz":"tz.mbn",
                          "hyp":"hyp.mbn",
                          "rpm":"rpm.mbn",
                          "boot":"boot.img",
                          "modem":"NON-HLOS.bin",
                          "aboot":"emmc_appsboot.mbn",
                          "recovery":"recovery.img",
                          "system":"system.img",
                          "userdata":"userdata.img",
                          "persist":"persist.img",
                          "cache":"cache.img",
                          "laf":"laf.img",
                          "factory":"factory_ramdisk.img"}
    downloadBtnHash = {}
    eraseBtnHash = {}
    resultPrint = ''
    
    def __init__(self, *args, **kwds):
        # begin wxGlade: fastBootFrame.__init__
        wx.Frame.__init__(self, *args, **kwds)
        self.label_fastboot_location = wx.StaticText(self, wx.ID_ANY, "Fastboot.exe location")
        self.text_ctrl_fastboot_location = wx.TextCtrl(self, wx.ID_ANY, "")
        self.label_3 = wx.StaticText(self, wx.ID_ANY, "")
        self.button_fastboot_location = wx.Button(self, wx.ID_ANY, "...")
        self.radio_box_dest_location = wx.RadioBox(self, wx.ID_ANY, "Destination select", choices=["Dest1 Activation", "Dest2 Activation"], majorDimension=2, style=wx.RA_SPECIFY_ROWS)
        self.static_line_2 = wx.StaticLine(self, wx.ID_ANY, style=wx.EXPAND)
        self.label_src1 = wx.StaticText(self, wx.ID_ANY, "src1", style=wx.ALIGN_CENTER)
        self.text_ctrl_src1 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.button_dir_src1 = wx.Button(self, wx.ID_ANY, "...")
        self.button_cpy_src1 = wx.Button(self, wx.ID_ANY, "copy to dest")
        self.label_src2 = wx.StaticText(self, wx.ID_ANY, "src2", style=wx.ALIGN_CENTER)
        self.text_ctrl_src2 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.button_dir_src2 = wx.Button(self, wx.ID_ANY, "...")
        self.button_cpy_src2 = wx.Button(self, wx.ID_ANY, "copy to dest")
        self.label_src3 = wx.StaticText(self, wx.ID_ANY, "src3", style=wx.ALIGN_CENTER)
        self.text_ctrl_src3 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.button_dir_src3 = wx.Button(self, wx.ID_ANY, "...")
        self.button_cpy_src3 = wx.Button(self, wx.ID_ANY, "copy to dest")
        self.label_src4 = wx.StaticText(self, wx.ID_ANY, "src4", style=wx.ALIGN_CENTER)
        self.text_ctrl_src4 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.button_dir_src4 = wx.Button(self, wx.ID_ANY, "...")
        self.button_cpy_src4 = wx.Button(self, wx.ID_ANY, "copy to dest")
        self.label_src5 = wx.StaticText(self, wx.ID_ANY, "src5", style=wx.ALIGN_CENTER)
        self.text_ctrl_src5 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.button_dir_src5 = wx.Button(self, wx.ID_ANY, "...")
        self.button_cpy_src5 = wx.Button(self, wx.ID_ANY, "copy to dest")
        self.static_line_3 = wx.StaticLine(self, wx.ID_ANY, style=wx.EXPAND)
        self.label_dest1 = wx.StaticText(self, wx.ID_ANY, "Dest1", style=wx.ALIGN_CENTER)
        self.text_ctrl_dest1 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.button_dir_dest1 = wx.Button(self, wx.ID_ANY, "...")
        self.button_fastbootReboot = wx.Button(self, wx.ID_ANY, "fastboot reboot")
        self.label_dest2 = wx.StaticText(self, wx.ID_ANY, "Dest2", style=wx.ALIGN_CENTER)
        self.text_ctrl_dest2 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.button_dir_dest2 = wx.Button(self, wx.ID_ANY, "...")
        self.button_5 = wx.Button(self, wx.ID_ANY, "adb root")
        self.label_7 = wx.StaticText(self, wx.ID_ANY, "")
        self.button_updateSetup = wx.Button(self, wx.ID_ANY, "Update Settings")
        self.label_5 = wx.StaticText(self, wx.ID_ANY, "")
        self.button_goto_fastboot = wx.Button(self, wx.ID_ANY, "GoTo FastBoot")
        self.static_line_4 = wx.StaticLine(self, wx.ID_ANY, style=wx.EXPAND)
        self.label_2 = wx.StaticText(self, wx.ID_ANY, "-- SATUS --", style=wx.ALIGN_CENTER)
        self.text_ctrl_cmd = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_BESTWRAP | wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_RICH)
        self.text_ctrl_status = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_BESTWRAP | wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_RICH)
        self.static_line_6 = wx.StaticLine(self, wx.ID_ANY, style=wx.EXPAND)
        self.label_11 = wx.StaticText(self, wx.ID_ANY, "Download  ", style=wx.ALIGN_CENTER)
        self.button_d1 = wx.Button(self, wx.ID_ANY, "emmc_appsboot.mbn")
        self.button_d2 = wx.Button(self, wx.ID_ANY, "boot.img")
        self.button_d3 = wx.Button(self, wx.ID_ANY, "sbl1.mbn")
        self.button_d4 = wx.Button(self, wx.ID_ANY, "recovery.img")
        self.button_d5 = wx.Button(self, wx.ID_ANY, "laf.img")
        self.button_d6 = wx.Button(self, wx.ID_ANY, "tz.mbn")
        self.button_d7 = wx.Button(self, wx.ID_ANY, "cache.img")
        self.button_d8 = wx.Button(self, wx.ID_ANY, "factory_ramdisk.img")
        self.button_d9 = wx.Button(self, wx.ID_ANY, "misc.img")
        self.button_d10 = wx.Button(self, wx.ID_ANY, "rpm.mbn")
        self.button_d11 = wx.Button(self, wx.ID_ANY, "NON-HLOS.bin")
        self.static_line_1 = wx.StaticLine(self, wx.ID_ANY, style=wx.EXPAND)
        self.label_12 = wx.StaticText(self, wx.ID_ANY, "Erase", style=wx.ALIGN_CENTER_HORIZONTAL)
        self.button_e1 = wx.Button(self, wx.ID_ANY, "system")
        self.button_e2 = wx.Button(self, wx.ID_ANY, "userdata")
        self.button_e3 = wx.Button(self, wx.ID_ANY, "modemst1")
        self.button_e4 = wx.Button(self, wx.ID_ANY, "persist")
        self.button_e5 = wx.Button(self, wx.ID_ANY, "cache")
        self.button_e6 = wx.Button(self, wx.ID_ANY, "factory")
        self.button_e7 = wx.Button(self, wx.ID_ANY, "modemst2")
        self.static_line_5 = wx.StaticLine(self, wx.ID_ANY, style=wx.EXPAND)
        self.label_1 = wx.StaticText(self, wx.ID_ANY, "Created by suker 2015.09.01", style=wx.ALIGN_RIGHT)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.onSetFastBootExeDir, self.button_fastboot_location)
        self.Bind(wx.EVT_RADIOBOX, self.onRadioDestSelect, self.radio_box_dest_location)
        self.Bind(wx.EVT_BUTTON, self.onSetFileDir, self.button_dir_src1)
        self.Bind(wx.EVT_BUTTON, self.onCpySrc, self.button_cpy_src1)
        self.Bind(wx.EVT_BUTTON, self.onSetFileDir, self.button_dir_src2)
        self.Bind(wx.EVT_BUTTON, self.onCpySrc, self.button_cpy_src2)
        self.Bind(wx.EVT_BUTTON, self.onSetFileDir, self.button_dir_src3)
        self.Bind(wx.EVT_BUTTON, self.onCpySrc, self.button_cpy_src3)
        self.Bind(wx.EVT_BUTTON, self.onSetFileDir, self.button_dir_src4)
        self.Bind(wx.EVT_BUTTON, self.onCpySrc, self.button_cpy_src4)
        self.Bind(wx.EVT_BUTTON, self.onSetFileDir, self.button_dir_src5)
        self.Bind(wx.EVT_BUTTON, self.onCpySrc, self.button_cpy_src5)
        self.Bind(wx.EVT_BUTTON, self.onSetDir, self.button_dir_dest1)
        self.Bind(wx.EVT_BUTTON, self.onFastbootReboot, self.button_fastbootReboot)
        self.Bind(wx.EVT_BUTTON, self.onSetDir, self.button_dir_dest2)
        self.Bind(wx.EVT_BUTTON, self.onAdbRoot, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.onSaveSetupIni, self.button_updateSetup)
        self.Bind(wx.EVT_BUTTON, self.onGoToFastBoot, self.button_goto_fastboot)
        self.Bind(wx.EVT_BUTTON, self.onDownload, self.button_d1)
        self.Bind(wx.EVT_BUTTON, self.onDownload, self.button_d2)
        self.Bind(wx.EVT_BUTTON, self.onDownload, self.button_d3)
        self.Bind(wx.EVT_BUTTON, self.onDownload, self.button_d4)
        self.Bind(wx.EVT_BUTTON, self.onDownload, self.button_d5)
        self.Bind(wx.EVT_BUTTON, self.onDownload, self.button_d6)
        self.Bind(wx.EVT_BUTTON, self.onDownload, self.button_d7)
        self.Bind(wx.EVT_BUTTON, self.onDownload, self.button_d8)
        self.Bind(wx.EVT_BUTTON, self.onDownload, self.button_d9)
        self.Bind(wx.EVT_BUTTON, self.onDownload, self.button_d10)
        self.Bind(wx.EVT_BUTTON, self.onDownload, self.button_d11)
        self.Bind(wx.EVT_BUTTON, self.onErase, self.button_e1)
        self.Bind(wx.EVT_BUTTON, self.onErase, self.button_e2)
        self.Bind(wx.EVT_BUTTON, self.onErase, self.button_e3)
        self.Bind(wx.EVT_BUTTON, self.onErase, self.button_e4)
        self.Bind(wx.EVT_BUTTON, self.onErase, self.button_e5)
        self.Bind(wx.EVT_BUTTON, self.onErase, self.button_e6)
        self.Bind(wx.EVT_BUTTON, self.onErase, self.button_e7)
        # end wxGlade

        #-----------------------------------suker--------------------------------------
        self.downloadBtnHash[self.button_d1.Id] = self.button_d1.GetLabelText()
        self.downloadBtnHash[self.button_d2.Id] = self.button_d2.GetLabelText()
        self.downloadBtnHash[self.button_d3.Id] = self.button_d3.GetLabelText()
        self.downloadBtnHash[self.button_d4.Id] = self.button_d4.GetLabelText()
        self.downloadBtnHash[self.button_d5.Id] = self.button_d5.GetLabelText()
        self.downloadBtnHash[self.button_d6.Id] = self.button_d6.GetLabelText()
        self.downloadBtnHash[self.button_d7.Id] = self.button_d7.GetLabelText()
        self.downloadBtnHash[self.button_d8.Id] = self.button_d8.GetLabelText()
        self.downloadBtnHash[self.button_d9.Id] = self.button_d9.GetLabelText()
        self.downloadBtnHash[self.button_d10.Id] = self.button_d10.GetLabelText()
        self.downloadBtnHash[self.button_d11.Id] = self.button_d11.GetLabelText()
        
        self.eraseBtnHash[self.button_e1.Id] = self.button_e1.GetLabelText()
        self.eraseBtnHash[self.button_e2.Id] = self.button_e2.GetLabelText()
        self.eraseBtnHash[self.button_e3.Id] = self.button_e3.GetLabelText()
        self.eraseBtnHash[self.button_e4.Id] = self.button_e4.GetLabelText()
        self.eraseBtnHash[self.button_e5.Id] = self.button_e5.GetLabelText()
        self.eraseBtnHash[self.button_e6.Id] = self.button_e6.GetLabelText()
        self.eraseBtnHash[self.button_e7.Id] = self.button_e7.GetLabelText()
        
        print self.eraseBtnHash.keys()
        print self.eraseBtnHash.values()
        #------------------------------------------------------------------------------
        
        print SUKER_DEBUG + __package__
        self.setupiniFilePath = os.getcwd() + self.getDirMark() + __package__ + self.getDirMark() + "setup.ini"
        
        if os.path.exists(self.setupiniFilePath) :
            tempInFileRead = []
            try :
                with open(self.setupiniFilePath) as data :
                    for line in data :
                        tempInFileRead.append(line)                        
                
                if len(tempInFileRead) > 0 :
                    for i in tempInFileRead :
                        if 'fl>>' in i :
                            self.text_ctrl_fastboot_location.SetValue(i.split('fl>>')[1])
                        elif 's1>>' in i :
                            self.text_ctrl_src1.SetValue(i.split('s1>>')[1])
                        elif 's2>>' in i :
                            self.text_ctrl_src2.SetValue(i.split('s2>>')[1])
                        elif 's3>>' in i :
                            self.text_ctrl_src3.SetValue(i.split('s3>>')[1])
                        elif 's4>>' in i :
                            self.text_ctrl_src4.SetValue(i.split('s4>>')[1])
                        elif 's5>>' in i :
                            self.text_ctrl_src5.SetValue(i.split('s5>>')[1])
                        elif 'd1>>' in i :
                            self.text_ctrl_dest1.SetValue(i.split('d1>>')[1])
                        elif 'd2>>' in i :
                            self.text_ctrl_dest2.SetValue(i.split('d2>>')[1])
                        else :
                            pass
                    
            except IOError :
                print "File open error"

        self.activeDestPath = self.text_ctrl_dest1.GetValue()
        self.resultPrint = resultBinding()
        
    def __del(self) :
        del self.resultPrint
        
    def __set_properties(self):
        # begin wxGlade: fastBootFrame.__set_properties
        self.SetTitle("Suker FastBoot helper")
        self.SetSize((650, 660))
        self.SetBackgroundColour(wx.Colour(159, 159, 95))
        self.radio_box_dest_location.SetSelection(0)
        self.text_ctrl_src1.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.text_ctrl_src2.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.text_ctrl_src3.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.text_ctrl_src4.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.text_ctrl_src5.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.text_ctrl_dest1.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.button_fastbootReboot.SetBackgroundColour(wx.Colour(128, 128, 128))
        self.button_fastbootReboot.SetForegroundColour(wx.Colour(255, 255, 0))
        self.text_ctrl_dest2.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.button_5.SetBackgroundColour(wx.Colour(128, 128, 128))
        self.button_5.SetForegroundColour(wx.Colour(255, 255, 0))
        self.button_updateSetup.SetBackgroundColour(wx.Colour(0, 194, 0))
        self.button_goto_fastboot.SetBackgroundColour(wx.Colour(139, 14, 44))
        self.button_goto_fastboot.SetForegroundColour(wx.Colour(255, 255, 255))
        self.text_ctrl_cmd.SetForegroundColour(wx.Colour(194, 29, 7))
        self.text_ctrl_cmd.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.button_d1.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_d2.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_d3.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_d4.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_d5.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_d6.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_d7.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_d8.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_d9.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_d10.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_d11.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.static_line_1.SetForegroundColour(wx.Colour(0, 0, 0))
        self.button_e1.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_e2.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_e3.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_e4.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_e5.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_e6.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        self.button_e7.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: fastBootFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_2body = wx.BoxSizer(wx.HORIZONTAL)
        sizer_body = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_2 = wx.GridSizer(4, 4, 0, 0)
        grid_sizer_1 = wx.GridSizer(5, 3, 0, 0)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_dest = wx.BoxSizer(wx.HORIZONTAL)
        sizer_dest_main = wx.BoxSizer(wx.VERTICAL)
        sizer_dest3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_dest2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_dest1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_src = wx.BoxSizer(wx.HORIZONTAL)
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_21 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_20 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_19 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_fastboot_location = wx.BoxSizer(wx.HORIZONTAL)
        sizer_fastboot_location_right = wx.BoxSizer(wx.VERTICAL)
        sizer_fastboot_location_left = wx.BoxSizer(wx.VERTICAL)
        sizer_fastboot_location_left.Add(self.label_fastboot_location, 0, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 3)
        sizer_fastboot_location_left.Add(self.text_ctrl_fastboot_location, 0, wx.ALL | wx.EXPAND, 3)
        sizer_fastboot_location.Add(sizer_fastboot_location_left, 60, wx.ALL | wx.EXPAND, 0)
        sizer_fastboot_location_right.Add(self.label_3, 0, wx.ALL | wx.EXPAND, 3)
        sizer_fastboot_location_right.Add(self.button_fastboot_location, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 3)
        sizer_fastboot_location.Add(sizer_fastboot_location_right, 10, wx.ALL | wx.EXPAND, 0)
        sizer_fastboot_location.Add(self.radio_box_dest_location, 20, wx.ALL | wx.EXPAND, 1)
        sizer_2.Add(sizer_fastboot_location, 15, wx.ALL | wx.EXPAND, 3)
        sizer_2.Add(self.static_line_2, 1, wx.ALL | wx.EXPAND, 1)
        sizer_18.Add(self.label_src1, 5, wx.ALL | wx.EXPAND, 2)
        sizer_18.Add(self.text_ctrl_src1, 50, wx.ALL | wx.EXPAND, 2)
        sizer_18.Add(self.button_dir_src1, 5, wx.ALL | wx.EXPAND, 4)
        sizer_18.Add(self.button_cpy_src1, 12, wx.ALL | wx.EXPAND, 2)
        sizer_17.Add(sizer_18, 1, wx.ALL | wx.EXPAND, 2)
        sizer_19.Add(self.label_src2, 5, wx.ALL | wx.EXPAND, 2)
        sizer_19.Add(self.text_ctrl_src2, 50, wx.ALL | wx.EXPAND, 2)
        sizer_19.Add(self.button_dir_src2, 5, wx.ALL | wx.EXPAND, 4)
        sizer_19.Add(self.button_cpy_src2, 12, wx.ALL | wx.EXPAND, 2)
        sizer_17.Add(sizer_19, 1, wx.ALL | wx.EXPAND, 2)
        sizer_20.Add(self.label_src3, 5, wx.ALL | wx.EXPAND, 2)
        sizer_20.Add(self.text_ctrl_src3, 50, wx.ALL | wx.EXPAND, 2)
        sizer_20.Add(self.button_dir_src3, 5, wx.ALL | wx.EXPAND, 4)
        sizer_20.Add(self.button_cpy_src3, 12, wx.ALL | wx.EXPAND, 2)
        sizer_17.Add(sizer_20, 1, wx.ALL | wx.EXPAND, 2)
        sizer_21.Add(self.label_src4, 5, wx.ALL | wx.EXPAND, 2)
        sizer_21.Add(self.text_ctrl_src4, 50, wx.ALL | wx.EXPAND, 2)
        sizer_21.Add(self.button_dir_src4, 5, wx.ALL | wx.EXPAND, 4)
        sizer_21.Add(self.button_cpy_src4, 12, wx.ALL | wx.EXPAND, 2)
        sizer_17.Add(sizer_21, 1, wx.ALL | wx.EXPAND, 2)
        sizer_22.Add(self.label_src5, 5, wx.ALL | wx.EXPAND, 2)
        sizer_22.Add(self.text_ctrl_src5, 50, wx.ALL | wx.EXPAND, 2)
        sizer_22.Add(self.button_dir_src5, 5, wx.ALL | wx.EXPAND, 4)
        sizer_22.Add(self.button_cpy_src5, 12, wx.ALL | wx.EXPAND, 2)
        sizer_17.Add(sizer_22, 1, wx.ALL | wx.EXPAND, 2)
        sizer_src.Add(sizer_17, 1, wx.ALL | wx.EXPAND, 3)
        sizer_2.Add(sizer_src, 30, wx.ALL | wx.EXPAND, 4)
        sizer_2.Add(self.static_line_3, 0, wx.ALL | wx.EXPAND, 1)
        sizer_dest1.Add(self.label_dest1, 10, wx.ALL | wx.EXPAND, 2)
        sizer_dest1.Add(self.text_ctrl_dest1, 50, wx.ALL | wx.EXPAND, 1)
        sizer_dest1.Add(self.button_dir_dest1, 15, wx.ALL | wx.EXPAND, 2)
        sizer_dest1.Add(self.button_fastbootReboot, 20, wx.ALL | wx.EXPAND, 2)
        sizer_dest_main.Add(sizer_dest1, 1, wx.ALL | wx.EXPAND, 2)
        sizer_dest2.Add(self.label_dest2, 10, wx.ALL | wx.EXPAND, 2)
        sizer_dest2.Add(self.text_ctrl_dest2, 50, wx.ALL | wx.EXPAND, 1)
        sizer_dest2.Add(self.button_dir_dest2, 15, wx.ALL | wx.EXPAND, 2)
        sizer_dest2.Add(self.button_5, 20, wx.ALL | wx.EXPAND, 2)
        sizer_dest_main.Add(sizer_dest2, 1, wx.ALL | wx.EXPAND, 2)
        sizer_dest3.Add(self.label_7, 5, wx.ALL | wx.EXPAND, 2)
        sizer_dest3.Add(self.button_updateSetup, 40, wx.ALL | wx.EXPAND, 1)
        sizer_dest3.Add(self.label_5, 5, wx.ALL | wx.EXPAND, 2)
        sizer_dest3.Add(self.button_goto_fastboot, 40, wx.ALL | wx.EXPAND, 1)
        sizer_dest_main.Add(sizer_dest3, 1, wx.ALL | wx.EXPAND, 2)
        sizer_dest.Add(sizer_dest_main, 1, wx.ALL | wx.EXPAND, 1)
        sizer_2.Add(sizer_dest, 18, wx.ALL | wx.EXPAND, 2)
        sizer_2.Add(self.static_line_4, 0, wx.ALL | wx.EXPAND, 1)
        sizer_3.Add(self.label_2, 10, wx.ALL | wx.EXPAND, 3)
        sizer_3.Add(self.text_ctrl_cmd, 30, wx.ALL | wx.EXPAND, 3)
        sizer_3.Add(self.text_ctrl_status, 60, wx.ALL | wx.EXPAND, 3)
        sizer_2body.Add(sizer_3, 40, 0, 0)
        sizer_2body.Add(self.static_line_6, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.label_11, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 3)
        grid_sizer_1.Add(self.button_d1, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_1.Add(self.button_d2, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_1.Add(self.button_d3, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_1.Add(self.button_d4, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_1.Add(self.button_d5, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_1.Add(self.button_d6, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_1.Add(self.button_d7, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_1.Add(self.button_d8, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_1.Add(self.button_d9, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_1.Add(self.button_d10, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_1.Add(self.button_d11, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_body.Add(grid_sizer_1, 55, wx.ALL | wx.EXPAND, 3)
        sizer_body.Add(self.static_line_1, 2, wx.ALL | wx.EXPAND, 1)
        grid_sizer_2.Add(self.label_12, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 3)
        grid_sizer_2.Add(self.button_e1, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_2.Add(self.button_e2, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_2.Add(self.button_e3, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_2.Add(self.button_e4, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_2.Add(self.button_e5, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_2.Add(self.button_e6, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        grid_sizer_2.Add(self.button_e7, 0, wx.ALIGN_CENTER | wx.ALL, 2)
        sizer_body.Add(grid_sizer_2, 35, wx.ALL | wx.EXPAND, 3)
        sizer_2body.Add(sizer_body, 60, 0, 3)
        sizer_2.Add(sizer_2body, 35, wx.ALL | wx.EXPAND, 0)
        sizer_2.Add(self.static_line_5, 0, wx.ALL | wx.EXPAND, 1)
        sizer_2.Add(self.label_1, 5, wx.ALL | wx.EXPAND, 2)
        sizer_1.Add(sizer_2, 1, wx.ALL | wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def onSetFastBootExeDir(self, event):  # wxGlade: fastBootFrame.<event_handler>
        path = self.setFilePath()
        self.text_ctrl_fastboot_location.SetValue(path)
        self.updateINIData()
        event.Skip()

    def onRadioDestSelect(self, event):  # wxGlade: fastBootFrame.<event_handler>
        radioSelected = event.GetEventObject()
        self.destIdx = radioSelected.GetSelection()
        if self.destIdx == 0 :
            self.activeDestPath = self.text_ctrl_dest1.GetValue().strip()
        else :
            self.activeDestPath = self.text_ctrl_dest2.GetValue().strip()
        event.Skip()

    def onSetFileDir(self, event):  # wxGlade: fastBootFrame.<event_handler>
        path = self.setFilePath()
        eventID = event.GetId()
        if eventID == self.button_dir_src1.Id :
            self.text_ctrl_src1.SetValue(path)
        elif eventID == self.button_dir_src2.Id :
            self.text_ctrl_src2.SetValue(path)
        elif eventID == self.button_dir_src3.Id :
            self.text_ctrl_src3.SetValue(path)
        elif eventID == self.button_dir_src4.Id :
            self.text_ctrl_src4.SetValue(path)
        elif eventID == self.button_dir_src5.Id :
            self.text_ctrl_src5.SetValue(path)

        self.updateINIData()
        event.Skip()

    def onSetDir(self, event):  # wxGlade: fastBootFrame.<event_handler>
        path = self.setDirPath()
        eventID = event.GetId()        
        if eventID == self.button_dir_dest1.Id :
            self.text_ctrl_dest1.SetValue(path)
        elif eventID == self.button_dir_dest2.Id :
            self.text_ctrl_dest2.SetValue(path)
        else :
            pass
        
        self.updateINIData()
        event.Skip()
    
    def updateINIData(self) :
        self.setupINIData[0] = "fl>>"+self.text_ctrl_fastboot_location.GetValue().strip()+"\n"
        self.setupINIData[1] = "s1>>"+self.text_ctrl_src1.GetValue().strip()+"\n"
        self.setupINIData[2] = "s2>>"+self.text_ctrl_src2.GetValue().strip()+"\n"
        self.setupINIData[3] = "s3>>"+self.text_ctrl_src3.GetValue().strip()+"\n"
        self.setupINIData[4] = "s4>>"+self.text_ctrl_src4.GetValue().strip()+"\n"
        self.setupINIData[5] = "s5>>"+self.text_ctrl_src5.GetValue().strip()+"\n"
        self.setupINIData[6] = "d1>>"+self.text_ctrl_dest1.GetValue().strip()+"\n"
        self.setupINIData[7] = "d2>>"+self.text_ctrl_dest2.GetValue().strip()+"\n"
        if self.destIdx == 0 :
            self.activeDestPath = self.text_ctrl_dest1.GetValue().strip()
        else :
            self.activeDestPath = self.text_ctrl_dest2.GetValue().strip()
        
    def onSaveSetupIni(self, event):  # wxGlade: fastBootFrame.<event_handler>
        self.saveIni()
        event.Skip()
        
    def saveIni(self) :
        self.updateINIData()
        if os.path.exists(self.setupiniFilePath) :
            iniFile = file(self.setupiniFilePath, 'w')
            iniFile.writelines(self.setupINIData)
            iniFile.close()

    def onCpySrc(self, event):  # wxGlade: fastBootFrame.<event_handler>
        self.saveIni()
        validFiles = False
        src = ""
        dest = self.activeDestPath
        eventID = event.GetId()
        if os.path.exists(dest) :
            if eventID == self.button_cpy_src1.Id :
                src = self.text_ctrl_src1.GetValue().strip()
                if os.path.exists(src) :
                    validFiles = True
            elif eventID == self.button_cpy_src2.Id :
                src = self.text_ctrl_src2.GetValue().strip()
                if os.path.exists(src) :
                    validFiles = True
            elif eventID == self.button_cpy_src3.Id :
                src = self.text_ctrl_src3.GetValue().strip()
                if os.path.exists(src) :
                    validFiles = True
            elif eventID == self.button_cpy_src4.Id :
                src = self.text_ctrl_src4.GetValue().strip()
                if os.path.exists(src) :
                    validFiles = True
            elif eventID == self.button_cpy_src5.Id :
                src = self.text_ctrl_src5.GetValue().strip()
                if os.path.exists(src) :
                    validFiles = True
            else :
                pass #error
        else :
            ctypes.windll.user32.MessageBoxA(0, "Destination path is wrong!", "Warning~~", 1)

        if validFiles == True :            
            shutil.copy(src, dest + self.getDirMark() + os.path.basename(src))
            ctypes.windll.user32.MessageBoxA(0, "It's done...", "Success!!", 1)
            
        event.Skip()

    def onFastbootReboot(self, event):  # wxGlade: fastBootFrame.<event_handler>
        _CMDS_ = ["fastboot", "reboot"]
        _CMDS_STR_ = "fastboot reboot"
        self.text_ctrl_cmd.SetValue(_CMDS_STR_)
        self.runCommand(_CMDS_, 3)
        event.Skip()
        
    def onAdbRoot(self, event):  # wxGlade: fastBootFrame.<event_handler>
        _CMDS_ = ["adb", "root"]        
        _CMDS_STR_ = "adb root"
        self.text_ctrl_cmd.SetValue(_CMDS_STR_)
        self.runCommand(_CMDS_, 3)
        event.Skip()

    def onGoToFastBoot(self, event):
        _CMDS_ = ["adb", "reboot", "bootloader"]
        _CMDS_STR_ = "adb reboot bootloader"
        self.text_ctrl_cmd.SetValue(_CMDS_STR_)
        self.runCommand(_CMDS_, 3)
        event.Skip()

    def onDownload(self, event):  # wxGlade: fastBootFrame.<event_handler>
        self.saveIni()
        eventID = event.GetId()
        partition = ""
        btnName = self.downloadBtnHash[eventID]
        
        for _partition, _binaryName in self.partitionAndBinary.items():
            if _binaryName == btnName :
                partition = _partition
                break

        binaryName = self.activeDestPath + self.getDirMark() + btnName.encode('utf-8')

        _CMDS_ = ["fastboot", "flash", partition, binaryName]
        _CMDS_STR_ = "fastboot flash " + partition + " " + binaryName
        self.text_ctrl_cmd.SetValue(_CMDS_STR_)
        self.runCommand(_CMDS_, 3)
        
        event.Skip()

    def onErase(self, event):  # wxGlade: fastBootFrame.<event_handler>
        self.saveIni()
        eventID = event.GetId()
        btnName = self.eraseBtnHash[eventID]
        partition = btnName

        _CMDS_ = ["fastboot", "erase", partition]
        _CMDS_STR_ = "fastboot erase " + partition
        self.text_ctrl_cmd.SetValue(_CMDS_STR_)
        self.runCommand(_CMDS_, 3)
        
        event.Skip()
    
    def runCommand(self, _CMDS_, t) :
        command = Command(_CMDS_, self.resultPrint)
        command.run(timeout=t)

        self.text_ctrl_status.SetValue(self.resultPrint.getResult())
        self.resultPrint.clearResult()
        
    def setFilePath(self):  # wxGlade: AbstractorShell.<event_handler>
        path = ""
        dlg = wx.FileDialog(self, "select file path", style=wx.wx.FD_OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()

        dlg.Destroy()
        return path
        
    def setDirPath(self):  # wxGlade: AbstractorShell.<event_handler>
        path = ""
        dlg = wx.DirDialog(self, "select directory path", style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()

        dlg.Destroy()
        return path

    def getDirMark(self) :
        linuxMark = '/'
        winMark = '\\'
        if sys.platform=='linux2' :
            return linuxMark
        else :
            return winMark

class resultBinding() :
    resultList = ""
    def __init__(self) :
        self.resultList = ""
    def saveResult(self, text) :
        self.resultList = text
    def getResult(self) :
        return self.resultList
    def clearResult(self) :
        self.resultList = ""
    
##--> http://stackoverflow.com/questions/3733270/python-subprocess-timeout
class Command(object):
    tempOut = []
    tempText = ""
    def __init__(self, cmd, resultBinding):
        self.cmd = cmd
        self.process = None
        self.resultPrint = resultBinding
        
    def run(self, timeout):
        def target():
            print 'Thread started'
            self.process = subprocess.Popen(self.cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            self.tempOut = self.process.stderr.readlines()
            self.process.communicate()
            print 'Thread finished' 

        thread = threading.Thread(target=target)
        thread.start()

        thread.join(timeout)
        self.tempText = "Excceed 3 seconds to response~\n"
        if thread.is_alive():
            print 'Terminating process'
            self.resultPrint.saveResult(self.tempText + "Please check device connected!")
            self.process.terminate()
#            thread.join()
            return
        
        if len(self.tempOut) > 0 :
            self.tempOut = "".join(self.tempOut)
            self.resultPrint.saveResult(str(self.tempOut))


#import time
#from threading import Thread
#
#def printer():
#    for _ in range(3):
#        time.sleep(1.0)
#        print "hello"
#
#thread = Thread(target=printer)
#thread.start()
#
#print "goodbye"